9, 1, 4, 10, 8)])
data.rear <- data.var[which(data.var$DATE < piv.date), ]
data.spwn <- data.var[which(data.var$DATE > piv.date), ]
shapeScale = rep(21 : 25, 2) # Fill for detects, hollow for ND
det = subset(data.rear, ND == 1)
ND = subset(data.rear, ND == -1)
# Plot Cold-water
plts[[count]] <- ggplot() + theme_bw() +
geom_point(data = det, size = 3,
aes(x = DATE, y = VAL, color = STAID, shape = STAID, group = STAID,
fill = STAID)) + # Fill for detected values
geom_point(data = ND, size = 3, stroke = 1.1,
aes(x = DATE, y = VAL, color = STAID, shape = STAID, group = STAID)) +
scale_fill_brewer(palette = "Spectral", aesthetics = "fill") +
scale_colour_brewer(palette = "Spectral") +
scale_shape_manual(values = shapeScale) +
scale_x_datetime(breaks = date_breaks("1 days"),
labels = date_format("%m/%d"), limits = rear) +
scale_y_continuous(limits = c(0, ylims[j, i * 2])) +
ylab(ylims[j, 2 * i - 1]) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
axis.title.x = element_blank(), legend.position = "none",
legend.text = element_text(size = 10)) +
guides(col = guide_legend(ncol = 5))
# Plot Spawning
det = subset(data.spwn, ND == 1)
ND = subset(data.spwn, ND == -1)
plts[[count + 1]] <- ggplot() + theme_bw() + # REMEMBER TO REMOVE Y AXIS TITLE AND UNITS
geom_point(data = det, size = 3,
aes(x = DATE, y = VAL, color = STAID, shape = STAID, group = STAID,
fill = STAID)) + # Fill for detected values
geom_point(data = ND, size = 3, stroke = 1.1,
aes(x = DATE, y = VAL, color = STAID, shape = STAID, group = STAID)) +
scale_fill_brewer(palette = "Spectral", aesthetics = "fill") +
scale_colour_brewer(palette = "Spectral") +
scale_shape_manual(values = shapeScale) +
scale_x_datetime(breaks = date_breaks("1 days"),
labels = date_format("%m/%d"), limits = spwn) +
scale_y_continuous(limits = c(0, ylims[j, i * 2])) +
ylab(ylims[j, 2 * i - 1]) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
axis.title.x = element_blank(), axis.title.y = element_blank(),
axis.text.y = element_blank(), legend.position = "none",
legend.text = element_text(size = 10)) +
guides(col = guide_legend(ncol = 5))
}
# Start a new constituent (two columns over)
count <- count + 2
}
# Plots are arranged and output to a graphics file----
# CREATE LEGEND TO FIT INTO THE BOTTOM OF THE GRAPHS AS A STAND ALONE PLOT (GROB)
lims.blank <- as.POSIXct(c("1/1/2000 00:00", "1/1/2001 00:00"),
format = "%m/%d/%Y %H:%M", tz = "America/Los_Angeles")
u <- ggplot() + theme_bw() + scale_x_datetime(limits = lims.blank) +
scale_colour_brewer(palette = "Spectral", guide = guide_legend(label.hjust = 1.5)) +
scale_shape_manual(values = shapeScale) +
scale_fill_brewer(palette = "Spectral", aesthetics = "fill") +
geom_point(data = data.spwn,
aes(x = DATE,
y = VAL,
group = STAID,
color = STAID,
shape = STAID,
fill = STAID),
size = 2) +
theme(panel.grid = element_blank(), panel.border = element_blank(),
axis.title = element_blank(), axis.text = element_blank(),
axis.ticks = element_blank(), legend.box = "horizontal",
legend.position = "top", legend.title = element_blank(),
legend.key = element_rect(size = 5), legend.spacing.x = unit(0.25,"cm"),
legend.key.size = unit(1.7, 'lines'))
# Create layout matrix to include legend at the bottom
layout <- rbind(c(1, 2),
c(3, 4),
c(5, 6),
c(7, 8),
c(9, 9))
# Set plots in layout
x <- grid.arrange(plts[[8 * i - 7]], plts[[8 * i - 6]],
plts[[8 * i - 5]], plts[[8 * i - 4]],
plts[[8 * i - 3]], plts[[8 * i - 2]],
plts[[8 * i - 1]], plts[[8 * i]],
u, layout_matrix = layout,
ncol = 2, nrow = 5,
heights = c(2, 2, 2, 2, 1),
widths = c(4.2, 3.8))
# Print to file
ggsave(filename = paste0("fig0", i + 3, "_wq_deq_grabs_set", i, "_v2.png"),
plot = x, path = paste0(dir, dir.sub2), width = 8, height = 9,
units = "in", dpi = 300)
}
u <- ggplot() + theme_bw() + scale_x_datetime(limits = lims.blank) +
scale_colour_brewer(palette = "Spectral", guide = guide_legend(label.hjust = 1.5)) +
scale_shape_manual(values = shapeScale) +
scale_fill_brewer(palette = "Spectral", aesthetics = "fill") +
geom_point(data = data.spwn,
aes(x = DATE,
y = VAL,
group = STAID,
color = STAID,
shape = STAID,
fill = STAID),
size = 2) +
theme(panel.grid = element_blank(), panel.border = element_blank(),
axis.title = element_blank(), axis.text = element_blank(),
axis.ticks = element_blank(), legend.box = "horizontal",
legend.title = element_blank(), legend.position = c(0, 1),
legend.justification = c(0, 0), legend.direction = "horizontal"
legend.key = element_rect(size = 5), legend.spacing.x = unit(0.25,"cm"),
legend.key.size = unit(1.7, 'lines'))
u <- ggplot() + theme_bw() + scale_x_datetime(limits = lims.blank) +
scale_colour_brewer(palette = "Spectral", guide = guide_legend(label.hjust = 1.5)) +
scale_shape_manual(values = shapeScale) +
scale_fill_brewer(palette = "Spectral", aesthetics = "fill") +
geom_point(data = data.spwn,
aes(x = DATE,
y = VAL,
group = STAID,
color = STAID,
shape = STAID,
fill = STAID),
size = 2) +
theme(panel.grid = element_blank(), panel.border = element_blank(),
axis.title = element_blank(), axis.text = element_blank(),
axis.ticks = element_blank(), legend.box = "horizontal",
legend.title = element_blank(), legend.position = c(0, 1),
legend.justification = c(0, 0), legend.direction = "horizontal",
legend.key = element_rect(size = 5), legend.spacing.x = unit(0.25,"cm"),
legend.key.size = unit(1.7, 'lines'))
x <- grid.arrange(plts[[8 * i - 7]], plts[[8 * i - 6]],
plts[[8 * i - 5]], plts[[8 * i - 4]],
plts[[8 * i - 3]], plts[[8 * i - 2]],
plts[[8 * i - 1]], plts[[8 * i]],
u, layout_matrix = layout,
ncol = 2, nrow = 5,
heights = c(2, 2, 2, 2, 1),
widths = c(4.2, 3.8))
ggsave(filename = paste0("fig0", i + 3, "_wq_deq_grabs_set", i, "_v2.png"),
plot = x, path = paste0(dir, dir.sub2), width = 8, height = 9,
units = "in", dpi = 300)
u <- ggplot() + theme_bw() + scale_x_datetime(limits = lims.blank) +
scale_colour_brewer(palette = "Spectral", guide = guide_legend(label.hjust = 1.5)) +
scale_shape_manual(values = shapeScale) +
scale_fill_brewer(palette = "Spectral", aesthetics = "fill") +
geom_point(data = data.spwn,
aes(x = DATE,
y = VAL,
group = STAID,
color = STAID,
shape = STAID,
fill = STAID),
size = 2) +
theme(panel.grid = element_blank(), panel.border = element_blank(),
axis.title = element_blank(), axis.text = element_blank(),
axis.ticks = element_blank(), legend.box = "horizontal",
legend.title = element_blank(), legend.position = c(0, 1),
legend.justification = c(0, 1), legend.direction = "horizontal",
legend.key = element_rect(size = 5), legend.spacing.x = unit(0.25,"cm"),
legend.key.size = unit(1.7, 'lines'))
x <- grid.arrange(plts[[8 * i - 7]], plts[[8 * i - 6]],
plts[[8 * i - 5]], plts[[8 * i - 4]],
plts[[8 * i - 3]], plts[[8 * i - 2]],
plts[[8 * i - 1]], plts[[8 * i]],
u, layout_matrix = layout,
ncol = 2, nrow = 5,
heights = c(2, 2, 2, 2, 1),
widths = c(4.2, 3.8))
ggsave(filename = paste0("fig0", i + 3, "_wq_deq_grabs_set", i, "_v2.png"),
plot = x, path = paste0(dir, dir.sub2), width = 8, height = 9,
units = "in", dpi = 300)
detNotes = "Solid points indicate values detected above the detection limit\n Hollow points indicate values not detected"
detNotes = paste0("Solid points indicate values detected above the detection limit\n",
"Hollow points indicate values not detected")
u <- ggplot() + theme_bw() + scale_x_datetime(limits = lims.blank) +
scale_colour_brewer(palette = "Spectral", guide = guide_legend(label.hjust = 1.5)) +
scale_shape_manual(values = shapeScale) +
scale_fill_brewer(palette = "Spectral", aesthetics = "fill") +
geom_point(data = data.spwn,
aes(x = DATE,
y = VAL,
group = STAID,
color = STAID,
shape = STAID,
fill = STAID),
size = 2) +
theme(panel.grid = element_blank(), panel.border = element_blank(),
axis.title = element_blank(), axis.text = element_blank(),
axis.ticks = element_blank(), legend.box = "horizontal",
legend.title = element_blank(), legend.position = c(0, 1),
legend.justification = c(0, 1), legend.direction = "horizontal",
legend.key = element_rect(size = 5), legend.spacing.x = unit(0.25,"cm"),
legend.key.size = unit(1.7, 'lines')) +
annotate("text", 0.5, 0, color = "black", label = detNotes, hjust = 0, size = 2.25)
x <- grid.arrange(plts[[8 * i - 7]], plts[[8 * i - 6]],
plts[[8 * i - 5]], plts[[8 * i - 4]],
plts[[8 * i - 3]], plts[[8 * i - 2]],
plts[[8 * i - 1]], plts[[8 * i]],
u, layout_matrix = layout,
ncol = 2, nrow = 5,
heights = c(2, 2, 2, 2, 1),
widths = c(4.2, 3.8))
ggsave(filename = paste0("fig0", i + 3, "_wq_deq_grabs_set", i, "_v2.png"),
plot = x, path = paste0(dir, dir.sub2), width = 8, height = 9,
units = "in", dpi = 300)
u <- ggplot() + theme_bw() + scale_x_datetime(limits = lims.blank) +
scale_colour_brewer(palette = "Spectral", guide = guide_legend(label.hjust = 1.5)) +
scale_shape_manual(values = shapeScale) +
scale_fill_brewer(palette = "Spectral", aesthetics = "fill") +
geom_point(data = data.spwn,
aes(x = DATE,
y = VAL,
group = STAID,
color = STAID,
shape = STAID,
fill = STAID),
size = 2) +
theme(panel.grid = element_blank(), panel.border = element_blank(),
axis.title = element_blank(), axis.text = element_blank(),
axis.ticks = element_blank(), legend.box = "horizontal",
legend.title = element_blank(), legend.position = c(0, 1),
legend.justification = c(0, 1), legend.direction = "horizontal",
legend.key = element_rect(size = 5), legend.spacing.x = unit(0.25,"cm"),
legend.key.size = unit(1.7, 'lines')) +
annotate("text", 1.2, lims.blank[1] + (lims.blank[1] + lims.blank[2]) / 2,
color = "black", label = detNotes, hjust = 0, size = 2.25)
u <- ggplot() + theme_bw() + scale_x_datetime(limits = lims.blank) +
scale_colour_brewer(palette = "Spectral", guide = guide_legend(label.hjust = 1.5)) +
scale_shape_manual(values = shapeScale) +
scale_fill_brewer(palette = "Spectral", aesthetics = "fill") +
geom_point(data = data.spwn,
aes(x = DATE,
y = VAL,
group = STAID,
color = STAID,
shape = STAID,
fill = STAID),
size = 2) +
theme(panel.grid = element_blank(), panel.border = element_blank(),
axis.title = element_blank(), axis.text = element_blank(),
axis.ticks = element_blank(), legend.box = "horizontal",
legend.title = element_blank(), legend.position = c(0, 1),
legend.justification = c(0, 1), legend.direction = "horizontal",
legend.key = element_rect(size = 5), legend.spacing.x = unit(0.25,"cm"),
legend.key.size = unit(1.7, 'lines')) +
annotate("text", lims.blank[1] + (lims.blank[1] + lims.blank[2]) / 2, 1,
color = "black", label = detNotes, hjust = 0, size = 2.25)
u <- ggplot() + theme_bw() + scale_x_datetime(limits = lims.blank) +
scale_colour_brewer(palette = "Spectral", guide = guide_legend(label.hjust = 1.5)) +
scale_shape_manual(values = shapeScale) +
scale_fill_brewer(palette = "Spectral", aesthetics = "fill") +
geom_point(data = data.spwn,
aes(x = DATE,
y = VAL,
group = STAID,
color = STAID,
shape = STAID,
fill = STAID),
size = 2) +
theme(panel.grid = element_blank(), panel.border = element_blank(),
axis.title = element_blank(), axis.text = element_blank(),
axis.ticks = element_blank(), legend.box = "horizontal",
legend.title = element_blank(), legend.position = c(0, 1),
legend.justification = c(0, 1), legend.direction = "horizontal",
legend.key = element_rect(size = 5), legend.spacing.x = unit(0.25,"cm"),
legend.key.size = unit(1.7, 'lines')) +
annotate("text", color = "black", label = detNotes, hjust = 0, size = 2.25)
x <- grid.arrange(plts[[8 * i - 7]], plts[[8 * i - 6]],
plts[[8 * i - 5]], plts[[8 * i - 4]],
plts[[8 * i - 3]], plts[[8 * i - 2]],
plts[[8 * i - 1]], plts[[8 * i]],
u, layout_matrix = layout,
ncol = 2, nrow = 5,
heights = c(2, 2, 2, 2, 1),
widths = c(4.2, 3.8))
ggsave(filename = paste0("fig0", i + 3, "_wq_deq_grabs_set", i, "_v2.png"),
plot = x, path = paste0(dir, dir.sub2), width = 8, height = 9,
units = "in", dpi = 300)
warnings()
y = add_sub(u, detNotes, y = 1, vjust = 0)
install.packages("cowplot")
library(cowplot)
y = add_sub(u, detNotes, y = 1, vjust = 0)
x <- grid.arrange(plts[[8 * i - 7]], plts[[8 * i - 6]],
plts[[8 * i - 5]], plts[[8 * i - 4]],
plts[[8 * i - 3]], plts[[8 * i - 2]],
plts[[8 * i - 1]], plts[[8 * i]],
u, layout_matrix = layout,
ncol = 2, nrow = 5,
heights = c(2, 2, 2, 2, 1),
widths = c(4.2, 3.8))
ggsave(filename = paste0("fig0", i + 3, "_wq_deq_grabs_set", i, "_v2.png"),
plot = x, path = paste0(dir, dir.sub2), width = 8, height = 9,
units = "in", dpi = 300)
v = text_grob(detNotes, just = "centre", hjust = NULL, vjust = NULL, rot = 0,
color = "black", face = "plain", size = NULL, lineheight = NULL,
family = NULL, ...)
install.packages("ggpubr")
library(ggpubr)
v = text_grob(detNotes, just = "centre", hjust = NULL, vjust = NULL, rot = 0,
color = "black", face = "plain", size = NULL, lineheight = NULL,
family = NULL, ...)
v = text_grob(detNotes, just = "centre", color = "black", face = "plain")
layout <- rbind(c(1, 2),
c(3, 4),
c(5, 6),
c(7, 8),
c(9, 10))
x <- grid.arrange(plts[[8 * i - 7]], plts[[8 * i - 6]],
plts[[8 * i - 5]], plts[[8 * i - 4]],
plts[[8 * i - 3]], plts[[8 * i - 2]],
plts[[8 * i - 1]], plts[[8 * i]],
u, v,
layout_matrix = layout,
ncol = 2, nrow = 5,
heights = c(2, 2, 2, 2, 1),
widths = c(4.2, 3.8))
ggsave(filename = paste0("fig0", i + 3, "_wq_deq_grabs_set", i, "_v2.png"),
plot = x, path = paste0(dir, dir.sub2), width = 8, height = 9,
units = "in", dpi = 300)
v = text_grob(detNotes, just = "left", color = "black", face = "plain", size = 8)
x <- grid.arrange(plts[[8 * i - 7]], plts[[8 * i - 6]],
plts[[8 * i - 5]], plts[[8 * i - 4]],
plts[[8 * i - 3]], plts[[8 * i - 2]],
plts[[8 * i - 1]], plts[[8 * i]],
u, v,
layout_matrix = layout,
ncol = 2, nrow = 5,
heights = c(2, 2, 2, 2, 1),
widths = c(4.2, 3.8))
ggsave(filename = paste0("fig0", i + 3, "_wq_deq_grabs_set", i, "_v2.png"),
plot = x, path = paste0(dir, dir.sub2), width = 8, height = 9,
units = "in", dpi = 300)
v = text_grob(detNotes, just = "left", color = "black", face = "plain", size = 8, hjust = 0)
v = text_grob(detNotes, just = "left", color = "black", face = "plain", size = 8, hjust = 0)
x <- grid.arrange(plts[[8 * i - 7]], plts[[8 * i - 6]],
plts[[8 * i - 5]], plts[[8 * i - 4]],
plts[[8 * i - 3]], plts[[8 * i - 2]],
plts[[8 * i - 1]], plts[[8 * i]],
u, v,
layout_matrix = layout,
ncol = 2, nrow = 5,
heights = c(2, 2, 2, 2, 1),
widths = c(4.2, 3.8))
ggsave(filename = paste0("fig0", i + 3, "_wq_deq_grabs_set", i, "_v2.png"),
plot = x, path = paste0(dir, dir.sub2), width = 8, height = 9,
units = "in", dpi = 300)
v = text_grob(detNotes, hjust = "center", vjust = "top", color = "black",
face = "plain", size = 8, hjust = 0)
x <- grid.arrange(plts[[8 * i - 7]], plts[[8 * i - 6]],
plts[[8 * i - 5]], plts[[8 * i - 4]],
plts[[8 * i - 3]], plts[[8 * i - 2]],
plts[[8 * i - 1]], plts[[8 * i]],
u, v,
layout_matrix = layout,
ncol = 2, nrow = 5,
heights = c(2, 2, 2, 2, 1),
widths = c(4.2, 3.8))
ggsave(filename = paste0("fig0", i + 3, "_wq_deq_grabs_set", i, "_v2.png"),
plot = x, path = paste0(dir, dir.sub2), width = 8, height = 9,
units = "in", dpi = 300)
v = text_grob(detNotes, hjust = "center", vjust = "top", color = "black",
face = "plain", size = 8)
v = text_grob(detNotes, hjust = "center", vjust = "top", color = "black",
face = "plain", size = 8)
v = text_grob(detNotes, just = "centre", color = "black", face = "plain", size = 8)
x <- grid.arrange(plts[[8 * i - 7]], plts[[8 * i - 6]],
plts[[8 * i - 5]], plts[[8 * i - 4]],
plts[[8 * i - 3]], plts[[8 * i - 2]],
plts[[8 * i - 1]], plts[[8 * i]],
u, v,
layout_matrix = layout,
ncol = 2, nrow = 5,
heights = c(2, 2, 2, 2, 1),
widths = c(4.2, 3.8))
ggsave(filename = paste0("fig0", i + 3, "_wq_deq_grabs_set", i, "_v2.png"),
plot = x, path = paste0(dir, dir.sub2), width = 8, height = 9,
units = "in", dpi = 300)
v = text_grob(detNotes, just = c(0.5, 1), color = "black", face = "plain", size = 8)
x <- grid.arrange(plts[[8 * i - 7]], plts[[8 * i - 6]],
plts[[8 * i - 5]], plts[[8 * i - 4]],
plts[[8 * i - 3]], plts[[8 * i - 2]],
plts[[8 * i - 1]], plts[[8 * i]],
u, v,
layout_matrix = layout,
ncol = 2, nrow = 5,
heights = c(2, 2, 2, 2, 1),
widths = c(4.2, 3.8))
ggsave(filename = paste0("fig0", i + 3, "_wq_deq_grabs_set", i, "_v2.png"),
plot = x, path = paste0(dir, dir.sub2), width = 8, height = 9,
units = "in", dpi = 300)
v = text_grob(detNotes, just = c(0.5, 0), color = "black", face = "plain", size = 8)
x <- grid.arrange(plts[[8 * i - 7]], plts[[8 * i - 6]],
plts[[8 * i - 5]], plts[[8 * i - 4]],
plts[[8 * i - 3]], plts[[8 * i - 2]],
plts[[8 * i - 1]], plts[[8 * i]],
u, v,
layout_matrix = layout,
ncol = 2, nrow = 5,
heights = c(2, 2, 2, 2, 1),
widths = c(4.2, 3.8))
ggsave(filename = paste0("fig0", i + 3, "_wq_deq_grabs_set", i, "_v2.png"),
plot = x, path = paste0(dir, dir.sub2), width = 8, height = 9,
units = "in", dpi = 300)
plts <- vector("list", 16)
count <- 1
for (i in 1 : 2)
{   # 2 figures based on constituent; Fig 1 - TKN, NH3, NOx, CBOD; Fig 2 - PO4, TP, TOC, TSS
for (j in  1 : 4)
{   # 4 vertical panels per figure for each constituent in the set
for (k in 1 : 2)
{
data.var <- cbind(data.wq[, 1 : 3], data.wq[, count + 4], data.wq[, count + 5])
names(data.var) <- c("DATE", "STAID", "GRP", "VAL", "ND")
data.var <- na.omit(data.var) # remove NAs
data.var$STAID <- as.factor(data.var$STAID)
data.var$STAID <- factor(data.var$STAID,
levels(factor(data.var$STAID))[c(3, 5, 2, 7, 6,
9, 1, 4, 10, 8)])
data.rear <- data.var[which(data.var$DATE < piv.date), ]
data.spwn <- data.var[which(data.var$DATE > piv.date), ]
shapeScale = rep(21 : 25, 2) # Fill for detects, hollow for ND
det = subset(data.rear, ND == 1)
ND = subset(data.rear, ND == -1)
# Plot Cold-water
plts[[count]] <- ggplot() + theme_bw() +
geom_point(data = det, size = 3,
aes(x = DATE, y = VAL, color = STAID, shape = STAID, group = STAID,
fill = STAID)) + # Fill for detected values
geom_point(data = ND, size = 3, stroke = 1.1,
aes(x = DATE, y = VAL, color = STAID, shape = STAID, group = STAID)) +
scale_fill_brewer(palette = "Spectral", aesthetics = "fill") +
scale_colour_brewer(palette = "Spectral") +
scale_shape_manual(values = shapeScale) +
scale_x_datetime(breaks = date_breaks("1 days"),
labels = date_format("%m/%d"), limits = rear) +
scale_y_continuous(limits = c(0, ylims[j, i * 2])) +
ylab(ylims[j, 2 * i - 1]) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
axis.title.x = element_blank(), legend.position = "none",
legend.text = element_text(size = 10)) +
guides(col = guide_legend(ncol = 5))
# Plot Spawning
det = subset(data.spwn, ND == 1)
ND = subset(data.spwn, ND == -1)
plts[[count + 1]] <- ggplot() + theme_bw() + # REMEMBER TO REMOVE Y AXIS TITLE AND UNITS
geom_point(data = det, size = 3,
aes(x = DATE, y = VAL, color = STAID, shape = STAID, group = STAID,
fill = STAID)) + # Fill for detected values
geom_point(data = ND, size = 3, stroke = 1.1,
aes(x = DATE, y = VAL, color = STAID, shape = STAID, group = STAID)) +
scale_fill_brewer(palette = "Spectral", aesthetics = "fill") +
scale_colour_brewer(palette = "Spectral") +
scale_shape_manual(values = shapeScale) +
scale_x_datetime(breaks = date_breaks("1 days"),
labels = date_format("%m/%d"), limits = spwn) +
scale_y_continuous(limits = c(0, ylims[j, i * 2])) +
ylab(ylims[j, 2 * i - 1]) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
axis.title.x = element_blank(), axis.title.y = element_blank(),
axis.text.y = element_blank(), legend.position = "none",
legend.text = element_text(size = 10)) +
guides(col = guide_legend(ncol = 5))
}
# Start a new constituent (two columns over)
count <- count + 2
}
# Plots are arranged and output to a graphics file----
# CREATE LEGEND TO FIT INTO THE BOTTOM OF THE GRAPHS AS A STAND ALONE PLOT (GROB)
lims.blank <- as.POSIXct(c("1/1/2000 00:00", "1/1/2001 00:00"),
format = "%m/%d/%Y %H:%M", tz = "America/Los_Angeles")
u <- ggplot() + theme_bw() + scale_x_datetime(limits = lims.blank) +
scale_colour_brewer(palette = "Spectral", guide = guide_legend(label.hjust = 1.5)) +
scale_shape_manual(values = shapeScale) +
scale_fill_brewer(palette = "Spectral", aesthetics = "fill") +
geom_point(data = data.spwn,
aes(x = DATE,
y = VAL,
group = STAID,
color = STAID,
shape = STAID,
fill = STAID),
size = 2) +
theme(panel.grid = element_blank(), panel.border = element_blank(),
axis.title = element_blank(), axis.text = element_blank(),
axis.ticks = element_blank(), legend.box = "horizontal",
legend.title = element_blank(), legend.position = c(0, 1),
legend.justification = c(0, 1), legend.direction = "horizontal",
legend.key = element_rect(size = 5), legend.spacing.x = unit(0.15,"cm"),
legend.key.size = unit(1.7, 'lines')) +
annotate("text", color = "black", label = detNotes, hjust = 0, size = 2.25)
v = text_grob(detNotes, just = c(0.5, 0), color = "black", face = "plain", size = 8)
# Create layout matrix to include legend at the bottom
layout <- rbind(c(1, 2),
c(3, 4),
c(5, 6),
c(7, 8),
c(9, 10))
# Set plots in layout
x <- grid.arrange(plts[[8 * i - 7]], plts[[8 * i - 6]],
plts[[8 * i - 5]], plts[[8 * i - 4]],
plts[[8 * i - 3]], plts[[8 * i - 2]],
plts[[8 * i - 1]], plts[[8 * i]],
u, v,
layout_matrix = layout,
ncol = 2, nrow = 5,
heights = c(2, 2, 2, 2, 1),
widths = c(4.2, 3.8))
# Print to file
ggsave(filename = paste0("fig0", i + 3, "_wq_deq_grabs_set", i, "_v2.png"),
plot = x, path = paste0(dir, dir.sub2), width = 8, height = 9,
units = "in", dpi = 300)
}
